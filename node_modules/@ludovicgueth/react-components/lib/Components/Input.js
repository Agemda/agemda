"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Input = function Input(_ref) {
  var name = _ref.name,
      label = _ref.label,
      type = _ref.type,
      placeholder = _ref.placeholder,
      className = _ref.className,
      value = _ref.value,
      onChange = _ref.onChange,
      help = _ref.help,
      helpValue = _ref.helpValue;

  return _react2.default.createElement(
    "div",
    { className: "field" },
    _react2.default.createElement(
      "label",
      { className: "label" },
      label
    ),
    _react2.default.createElement(
      "div",
      { className: "control" },
      _react2.default.createElement("input", {
        className: "input " + className,
        type: type,
        placeholder: placeholder,
        name: name,
        value: value,
        onChange: onChange
      })
    ),
    help && _react2.default.createElement(
      "p",
      { className: "help " + className },
      helpValue
    )
  );
};

Input.defaultProps = {
  name: "name",
  label: "label",
  type: "text",
  placeholder: "",
  className: "",
  help: false,
  helpValue: ""
};

Input.propTypes = {
  name: _propTypes2.default.string,
  label: _propTypes2.default.string,
  type: _propTypes2.default.string,
  placeholder: _propTypes2.default.string,
  className: _propTypes2.default.string,
  help: _propTypes2.default.bool,
  helpValue: _propTypes2.default.string
};

exports.default = Input;


{
  /* const Input = ({
  name,
  label,
  type,
  value,
  onChange,
  placeholder,
  onlyInput,
  isDanger = false
  }) => {
  if (onlyInput) {
    return (
      <input
        name={name}
        className={isDanger ? "input is-danger" : "input"}
        type={type}
        value={value}
        onChange={onChange}
        placeholder={placeholder}
      />
    );
  }
  return (
    <div className="field">
      <label className="label">{label}</label>
      <div className="control">
        <input
          name={name}
          className={isDanger ? "input is-danger" : "input"}
          type={type}
          value={value}
          onChange={onChange}
          placeholder={placeholder}
        />
      </div>
    </div>
  );
  };
  export default Input; */
}